@using Nop.Services.Common;
@using Nop.Core.Domain.Configuration;
@model TabModel

@inject IWorkContext workContext;
@inject IGenericAttributeService genericAttributeService;
@inject AdminAreaSettings adminAreaSettings;

@{
    var defaultGridPageSize = adminAreaSettings.DefaultGridPageSize;
    var gridPageSizes = adminAreaSettings.GridPageSizes;

    var productId = Model.ProductId;

    const string quickTabsBlockAttributeName = "ProductPage.SS.QuickTabs";
    var hideQuickTabsBlock = await genericAttributeService.GetAttributeAsync<bool>(await workContext.GetCurrentCustomerAsync(), quickTabsBlockAttributeName, defaultValue: true);
}

<nop-card asp-name="product-quick-tabs" asp-icon="fa fa-link" asp-title="@T("NopQuickTabs.Admin.NopProductsTabTitle")" asp-hide-block-attribute-name="@quickTabsBlockAttributeName" asp-hide="@hideQuickTabsBlock" asp-advanced="false">

    <div class="card-body">
        <div class="card card-default">
            <div class="card-body">
                @if (productId > 0)
                {

                      <div class="content-header clearfix">
                        <div class="float-left">
                            <input type="button" id="btnAddNewProductAttachment" name="btnAddNewProductAttachment"
                             value="@T("NopQuickTabs.Admin.NopProductsTabTitle.AddNewTab")"
                             onclick="openTabPopup(); return false;"
                             class="btn bg-primary" />
                            
                        </div>
                    </div>



                    <section class="content">
                        <div class="form-horizontal">
                            <div class="cards-group">
                                <div class="card card-default">
                                    <div class="card-header">
                                        <div class="card-title">
                                            @T("NopQuickTabs.Admin.NopProductsTabTitle.ProductSpecificTabs")
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        @{
                                            await Html.RenderPartialAsync("Table", new DataTablesModel
                                            {
                                                Name = "product-specific-tabs-grid",
                                                UrlRead = new DataUrl("ListProductSpecificTabs", "Tab", new RouteValueDictionary { ["productId"] = productId }),
                                                UrlDelete = new DataUrl("DeleteProductSpecificTabs", "Tab", new RouteValueDictionary { ["productId"] = productId }),
                                                Length = Model.TabSearchModel.PageSize,
                                                LengthMenu = Model.TabSearchModel.AvailablePageSizes,
                                                ColumnCollection = new List<ColumnProperty>
                                                {
                                                    new ColumnProperty(nameof(TabModel.Title))
                                                    {
                                                        Title = T("Admin.Widget.NopQuickTab.Field.Title").Text,
                                                        Width = "300"
                                                    },
                                                    new ColumnProperty(nameof(TabModel.ContentType))
                                                    {
                                                        Title = T("Admin.Widget.NopQuickTab.Field.ContentType").Text,
                                                        Width = "200",
                                                      
                                                    },


                                                    new ColumnProperty(nameof(TabModel.DisplayOrder))
                                                    {
                                                        Title = T("Admin.Widget.NopQuickTab.Field.DisplayOrder").Text,
                                                        Width = "100"
                                                    },
                                                    new ColumnProperty(nameof(TabModel.IsActive))
                                                    {
                                                        Title = T("Admin.Widget.NopQuickTab.Field.IsActive").Text,
                                                        Width = "100",
                                                        Render = new RenderBoolean()
                                                    },
                                                    new ColumnProperty(nameof(TabModel.Id))
                                                    {
                                                        Title = T("Admin.Common.Edit").Text,
                                                        Width = "100",
                                                        ClassName = NopColumnClassDefaults.Button,
                                                        Render = new RenderCustom("renderColumnEdit")
                                                    },
                                                    new ColumnProperty(nameof(TabModel.Id))
                                                    {
                                                        Title = T("Admin.Common.Delete").Text,
                                                        Width = "100",
                                                        ClassName = NopColumnClassDefaults.Button,
                                                        Render = new RenderButtonRemove(T("Admin.Common.Delete").Text)
                                                    }
                                                }
                                             });
                                        }




                                    </div>
                                </div>


                            </div>
                        </div>
                    </section>


                }

            </div>
        </div>
    </div>


</nop-card>
 

 
<script type="text/javascript">
    function openTabPopup() {
        var url = '@(Url.Action("Create", "Tab", new { productId = productId, IsPopup = true }))';
        OpenWindow(url, 1080, 700, true, function (result) {
            if (result) {
                // Assuming the result is true when the operation is successful
                updateTable('#product-specific-tabs-grid');
            }
        });
    }

    function OpenWindow(url, width, height, isPopup, callback) {
        // Open the popup window
        var popupWindow = window.open(url, 'PopupWindow', 'width=' + width + ',height=' + height + ',resizable=yes,scrollbars=yes');

        // Check if the window was closed
        var checkPopupClosed = setInterval(function () {
            if (popupWindow.closed) {
                clearInterval(checkPopupClosed);
                // Assuming the operation in the popup was successful, pass true to the callback
                if (typeof callback === 'function') {
                    callback(true);
                }
            }
        }, 1000);
    }

    function updateTable(tableId) {
        // Logic to refresh the DataTables instance
        $(tableId).DataTable().ajax.reload();
    }

      function renderColumnEdit(data, type, row, meta) {
        return '<button onclick="openEditPopup(' + data + '); return false;" class="btn btn-default"><i class="fas fa-pencil-alt"></i> @T("Admin.Common.Edit").Text</button>';
    }

    function openEditPopup(id) {
        var url = '@Url.Action("TabEditPopup", "Tab")/' + id + '?btnId=btnRefresh&formId=country-form';
        OpenWindow(url, 800, 400, true, function () {
            updateTable('#product-specific-tabs-grid');
        });
    }


</script>

