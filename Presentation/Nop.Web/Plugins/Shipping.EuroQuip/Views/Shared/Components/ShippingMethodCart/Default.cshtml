@model CheckoutShippingMethodModel
@{
    //Context.Items["nop.IgnoreScriptTagLocation"] = true;
}

<div class="checkout-data">
    <div class="delivery-methods" style="position: relative;">
        <div class="title-shipment">
            <div class="cart-tab-section-title">
                <strong>Choose Delivery Method</strong>
            </div>
            <div class="delivery-offers">
                <div class="offer-one offer" id="checkout-free-shipping-div" style="display:none">
                    <svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 91.87 66.25">
                        <defs>
                            <style>
                                .truck {
                                    fill: #4491ce;
                                }</style>
                        </defs>
                        <path class="truck" d="M91.87,33.63,78.73,16.82H66.5V0H9.4A9.4,9.4,0,0,0,0,9.4V53.5H8.81c0,.26,0,.52,0,.79a12,12,0,0,0,23.93,0c0-.27,0-.53,0-.79H58.87c0,.26,0,.52,0,.79a12,12,0,0,0,23.93,0c0-.27,0-.53,0-.79h9.15ZM24.64,54.29a3.91,3.91,0,1,1-7.82,0,4.15,4.15,0,0,1,.08-.79,3.91,3.91,0,0,1,7.66,0A4.15,4.15,0,0,1,24.64,54.29ZM70.8,58.2a3.91,3.91,0,0,1-3.91-3.91A3.47,3.47,0,0,1,67,53.5a3.91,3.91,0,0,1,7.66,0,4.15,4.15,0,0,1,.08.79A3.91,3.91,0,0,1,70.8,58.2Zm-4-20.75V25.07h7.57l9.52,12.38Z" />
                    </svg>
                    <span class="text" id="checkout-free-shipping-txt"></span>
                </div>

                @* <div class="offer-two offer">
                <i class="icon-fast-delivery"></i><span class="text" id="checkout">@T("Cart.DeliverOfferTwo")</span>
                </div>*@
            </div>
            <div class="delivery-notice" id="checkout-overnight-delivery-div" style="display:none">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 63.53 57.01">
                    <defs>
                        <style>
                            .red {
                                fill: #f70606;
                            }</style>
                    </defs>
                    <g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="red" d="M62.61,46.75,37.7,3.43a6.85,6.85,0,0,0-11.87,0L.92,46.75A6.85,6.85,0,0,0,6.86,57H56.68A6.85,6.85,0,0,0,62.61,46.75ZM34.34,45.16a2.6,2.6,0,0,1-5.2,0h0a2.6,2.6,0,0,1,5.2,0Zm0-10.62a2.6,2.6,0,0,1-5.2,0V22.92a2.6,2.6,0,0,1,5.2,0Z" /></g></g>
                </svg>
                <span class="text" id="checkout-overnight-delivery-txt">@T("Cart.DeliveryNotice")</span>
            </div>

            <div class="delivery-notice" id="click-and-collect-delivery-div" style="display:none"><span class="icon-info"></span><span class="text" id="click-and-collect-delivery-txt">@T("Collection.Time.Notice.Info")</span></div>
        </div>


        <div class="d-flex deliver-method-wrap">
            @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
            {
                @*<div class="delivery-method shipping-method @(Model.PickupPointsModel.PickupInStore ? "" : "active")" id="delivery-method-shipping" data-type="ShippingMethod">
            @T("Cart.ShippingMethod")
            </div>*@

                @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                {
                    var shippingMethod = Model.ShippingMethods[i];
                    if (shippingMethod.Name.ToLower().Contains("standard"))
                    {
                        <div class="delivery-method shipping-method shippingChange active" id="shippingoption_@(i)" data-type="ShippingMethod" data-value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" onclick="showFreeShipping()">
                            <label for="shippingoption_@(i)">@shippingMethod.Name</label>
                        </div>
                    }
                    else
                    {
                        <div class="delivery-method shipping-method shippingChange" id="shippingoption_@(i)" data-type="ShippingMethod" data-value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" onclick="showDeliveryText()">
                            <label for="shippingoption_@(i)">@shippingMethod.Name</label>
                        </div>
                    }



                }
            }

            @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
            {
                <div class="delivery-method click-and-collect-method shippingChange" id="delivery-method-pickup" data-type="PickupMethod">
                    <label>@T("Cart.ClickAndCollect")</label>
                </div>
            }
        </div>
        <div id="shipping-t-and-c">@T("Cart.Shipping.TermsLabel")</div>
        @if (Model.PickupPointsModel == null || !Model.PickupPointsModel.PickupInStoreOnly)
        {
            <div class="section shipping-method" id="shipping-methods-form">
                <div class="shipping-methods-form-content">

                    <div class="shipping-title">@T("Cart.SelectShippingMethod")<span class="icon-cross" id="shipping-popup-close">×</span></div>
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodTop })
                    @if (Model.Warnings.Count == 0)
                    {
                        <div class="table-shipping-option-wrap">
                            <table id="tableShippingOption" class="tableShippingOption">
                                <colgroup>
                                    <col style="width:3px" />
                                    <col style="width:9px" />
                                    <col style="width:11px" />
                                </colgroup>
                                <tr>
                                    <th><label>Order value</label></th>
                                    @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                                    {
                                        var shippingMethod = Model.ShippingMethods[i];
                                        <th class="method-name">
                                            @*<input id="shippingoption_@(i)" type="radio" class="shippingChange" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />*@
                                            <label for="shippingoption_@(i)">@T("Checkout.SelectShippingMethod.MethodAndFee", shippingMethod.Name, shippingMethod.Fee)</label>
                                        </th>
                                        @*@if (!string.IsNullOrEmpty(shippingMethod.Description))
                            {
                            <div class="method-description">
                            @Html.Raw(shippingMethod.Description)
                            </div>
                            }*@
                                    }
                                </tr>
                            </table>
                            @await Component.InvokeAsync("TopicBlock", new { systemName = "ShippingFee" })
                        </div>


                        if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                        {
                            <div class="multiple-locations">
                                @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                            </div>
                        }
                    }
                    else
                    {
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.OpCheckoutShippingMethodBottom })
                </div>
            </div>
        }
    </div>
    @if (Model.DisplayPickupInStore && Model.PickupPointsModel.AllowPickupInStore)
    {
        @await Html.PartialAsync("_PickupPoints.cshtml", Model.PickupPointsModel)
    }
    <script asp-location="Footer">
        var isPickupSelected = @Json.Serialize(Model.PickupPointsModel?.PickupInStore);
        $(document).ready(function () {
            //if (isPickupSelected) {
            //    var pickedUpLocationId = @Json.Serialize(Model.PickupPointsModel.SelectedPickupPoint);
            //    $("#pickup-points-form").show();
            //    $("#shipping-methods-form").hide();
            //    var dataValueOfSelectedPickupPoint = pickedUpLocationId + "___Pickup.PickupInStore";
            //    $($('.select-pickup-point').find("[data-val='" + dataValueOfSelectedPickupPoint + "']")).click();

            //}
            //else {
            //    $("#pickup-points-form").hide();
            //    // $("#shipping-methods-form").show();
            //}

            if (isPickupSelected) {
                $("#delivery-method-pickup").trigger('click');

            }
            else {
                $("#pickup-points-form").hide();
                $('.delivery-methods').find('.shippingChange.active').trigger('click');
            }
        });

        $("#delivery-method-pickup").on('click', function () {
            $('#checkout-free-shipping-div').css('display','none');
            $('#checkout-overnight-delivery-div').css('display','none');
            $('#click-and-collect-delivery-div').css('display', 'block');
        });

        $(".delivery-method").on('click', function () {
            if ($(this).data("type") == "ShippingMethod") {
                isPickupSelected = false;
                $("#pickup-points-form").hide();
                // $("#shipping-methods-form").show();

            }
            else {
                isPickupSelected = true;
                $("#PickupInStore").val(true);
                $("#pickup-points-form").show();
                $("#shipping-methods-form").hide();

            }

                $(".delivery-methods .delivery-method").each(function(index,item){
                  $(item).removeClass("active");
                });
                $(this).addClass("active");
            updateShippingMethod();
        });
    </script>

</div>

<script type="text/javascript" asp-location="Footer" async>
    $(document).ready(function () {
        $('#shipping-t-and-c').on('click', function(){
            $('.cart-collaterals #shipping-methods-form').fadeIn();
            $('body').addClass('openPop');
        });

        $("#shipping-popup-close").on('click', function(){
            $('.cart-collaterals #shipping-methods-form').fadeOut();
            $('body').removeClass('openPop');
        })


    });
</script>